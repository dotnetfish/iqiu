{"remainingRequest":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/thread-loader/dist/cjs.js!/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/babel-loader/lib/index.js!/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/src/views/home/homeLive.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/src/views/home/homeLive.vue","mtime":1597715527077},{"path":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/cache-loader/dist/cjs.js","mtime":1595570902420},{"path":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/thread-loader/dist/cjs.js","mtime":1595570907792},{"path":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/babel-loader/lib/index.js","mtime":1595570901804},{"path":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/cache-loader/dist/cjs.js","mtime":1595570902420},{"path":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/vue-loader/lib/index.js","mtime":1595570907990}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}