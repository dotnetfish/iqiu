{"remainingRequest":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/babel-loader/lib/index.js!/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/eslint-loader/index.js??ref--13-0!/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/src/modules/utils/crypto.js","dependencies":[{"path":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/src/modules/utils/crypto.js","mtime":1595570908577},{"path":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/cache-loader/dist/cjs.js","mtime":1595570902420},{"path":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/babel-loader/lib/index.js","mtime":1595570901804},{"path":"/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/node_modules/eslint-loader/index.js","mtime":1595570904372}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIGNyeXB0byA9IHJlcXVpcmUoJ2NyeXB0bycpOyAvLyBjb25zdCBhc3NlcnQgPSByZXF1aXJlKCdhc3NlcnQnKQoKCnZhciBwYXJhbSA9IHsKICBhbGc6ICdkZXMtZWRlMy1jYmMnLAogIGF1dG9QYWQ6IHRydWUsCiAga2V5OiAndzE0T0U5SDhRN3FWMGhpc09HbDBacE5YJywKICBpdjogJ0NxTWZlNGVvJwp9Owpjb25zb2xlLmxvZyhwYXJhbSwgJ2NyeXB0b2NyeXB0b2NyeXB0b2NyeXB0bycpOyAvLyDliqDlr4YKCmV4cG9ydCBmdW5jdGlvbiBlbmNyeXB0KHR5cGUsIHRleHQpIHsKICBpZiAodHlwZSA9PT0gJ21lc3NhZ2UnKSB7CiAgICBwYXJhbS5rZXkgPSAnMUl2RmNqVHh0WHlEOEtpMW5QYm0xSXBmJzsKICB9CgogIGNvbnNvbGUubG9nKCfmiafooYzliqDlr4YnLCBwYXJhbS5rZXksIHBhcmFtLmtleS5sZW5ndGgpOwogIHZhciBrZXkgPSBCdWZmZXIuZnJvbShwYXJhbS5rZXkpOwogIHZhciBpdiA9IEJ1ZmZlci5mcm9tKHBhcmFtLml2ID8gcGFyYW0uaXYgOiAwKTsKICB2YXIgcGxhaW50ZXh0ID0gdGV4dDsKICB2YXIgYWxnID0gcGFyYW0uYWxnOwogIHZhciBhdXRvUGFkID0gcGFyYW0uYXV0b1BhZDsKICB2YXIgY2lwaGVyID0gY3J5cHRvLmNyZWF0ZUNpcGhlcml2KGFsZywga2V5LCBpdik7CiAgY2lwaGVyLnNldEF1dG9QYWRkaW5nKGF1dG9QYWQpOwogIHZhciBjaXBoID0gY2lwaGVyLnVwZGF0ZShwbGFpbnRleHQsICd1dGY4JywgJ2Jhc2U2NCcpOwogIGNpcGggKz0gY2lwaGVyWyJmaW5hbCJdKCdiYXNlNjQnKTsKICBjb25zb2xlLmxvZygn5Yqg5a+GOicgKyBjaXBoKTsKICByZXR1cm4gY2lwaDsKfSAvLyDop6Plr4YKCmV4cG9ydCBmdW5jdGlvbiBkZWNyeXB0KHRleHQpIHsKICB2YXIga2V5ID0gQnVmZmVyLmZyb20ocGFyYW0ua2V5KTsKICB2YXIgaXYgPSBCdWZmZXIuZnJvbShwYXJhbS5pdiA/IHBhcmFtLml2IDogMCk7CiAgdmFyIGNpcGggPSB0ZXh0OwogIHZhciBhbGcgPSBwYXJhbS5hbGc7CiAgdmFyIGF1dG9QYWQgPSBwYXJhbS5hdXRvUGFkOwogIHZhciBkZWNpcGhlciA9IGNyeXB0by5jcmVhdGVEZWNpcGhlcml2KGFsZywga2V5LCBpdik7CiAgZGVjaXBoZXIuc2V0QXV0b1BhZGRpbmcoYXV0b1BhZCk7CiAgdmFyIHR4dCA9IGRlY2lwaGVyLnVwZGF0ZShjaXBoLCAnYmFzZTY0JywgJ3V0ZjgnKTsKICB0eHQgKz0gZGVjaXBoZXJbImZpbmFsIl0oJ3V0ZjgnKTsgLy8gY29uc29sZS5sb2coJ+ino+WvhjonICsgdHh0KQoKICByZXR1cm4gdHh0OyAvLyBhc3NlcnQuc3RyaWN0RXF1YWwodHh0LCAnMTIzJywgJ2ZhaWwnKQp9"},{"version":3,"sources":["/Users/zj-db0720/work/sourcescode/projects/gitee/iqiu/src/modules/utils/crypto.js"],"names":["crypto","require","param","alg","autoPad","key","iv","console","log","encrypt","type","text","length","Buffer","from","plaintext","cipher","createCipheriv","setAutoPadding","ciph","update","decrypt","decipher","createDecipheriv","txt"],"mappings":"AAAA,IAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,C,CACA;;;AAEA,IAAMC,KAAK,GAAG;AACZC,EAAAA,GAAG,EAAE,cADO;AAEZC,EAAAA,OAAO,EAAE,IAFG;AAGZC,EAAAA,GAAG,EAAE,0BAHO;AAIZC,EAAAA,EAAE,EAAE;AAJQ,CAAd;AAOAC,OAAO,CAACC,GAAR,CAAYN,KAAZ,EAAmB,0BAAnB,E,CAEA;;AACA,OAAO,SAASO,OAAT,CAAiBC,IAAjB,EAAuBC,IAAvB,EAA6B;AAClC,MAAID,IAAI,KAAK,SAAb,EAAwB;AACtBR,IAAAA,KAAK,CAACG,GAAN,GAAY,0BAAZ;AACD;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBN,KAAK,CAACG,GAA1B,EAA+BH,KAAK,CAACG,GAAN,CAAUO,MAAzC;AACA,MAAIP,GAAG,GAAGQ,MAAM,CAACC,IAAP,CAAYZ,KAAK,CAACG,GAAlB,CAAV;AACA,MAAIC,EAAE,GAAGO,MAAM,CAACC,IAAP,CAAYZ,KAAK,CAACI,EAAN,GAAWJ,KAAK,CAACI,EAAjB,GAAsB,CAAlC,CAAT;AACA,MAAIS,SAAS,GAAGJ,IAAhB;AACA,MAAIR,GAAG,GAAGD,KAAK,CAACC,GAAhB;AACA,MAAIC,OAAO,GAAGF,KAAK,CAACE,OAApB;AACA,MAAIY,MAAM,GAAGhB,MAAM,CAACiB,cAAP,CAAsBd,GAAtB,EAA2BE,GAA3B,EAAgCC,EAAhC,CAAb;AACAU,EAAAA,MAAM,CAACE,cAAP,CAAsBd,OAAtB;AACA,MAAIe,IAAI,GAAGH,MAAM,CAACI,MAAP,CAAcL,SAAd,EAAyB,MAAzB,EAAiC,QAAjC,CAAX;AACAI,EAAAA,IAAI,IAAIH,MAAM,SAAN,CAAa,QAAb,CAAR;AACAT,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQW,IAApB;AACA,SAAOA,IAAP;AACD,C,CAED;;AACA,OAAO,SAASE,OAAT,CAAiBV,IAAjB,EAAuB;AAC5B,MAAIN,GAAG,GAAGQ,MAAM,CAACC,IAAP,CAAYZ,KAAK,CAACG,GAAlB,CAAV;AACA,MAAIC,EAAE,GAAGO,MAAM,CAACC,IAAP,CAAYZ,KAAK,CAACI,EAAN,GAAWJ,KAAK,CAACI,EAAjB,GAAsB,CAAlC,CAAT;AACA,MAAIa,IAAI,GAAGR,IAAX;AACA,MAAIR,GAAG,GAAGD,KAAK,CAACC,GAAhB;AACA,MAAIC,OAAO,GAAGF,KAAK,CAACE,OAApB;AAEA,MAAIkB,QAAQ,GAAGtB,MAAM,CAACuB,gBAAP,CAAwBpB,GAAxB,EAA6BE,GAA7B,EAAkCC,EAAlC,CAAf;AACAgB,EAAAA,QAAQ,CAACJ,cAAT,CAAwBd,OAAxB;AACA,MAAIoB,GAAG,GAAGF,QAAQ,CAACF,MAAT,CAAgBD,IAAhB,EAAsB,QAAtB,EAAgC,MAAhC,CAAV;AACAK,EAAAA,GAAG,IAAIF,QAAQ,SAAR,CAAe,MAAf,CAAP,CAV4B,CAW5B;;AACA,SAAOE,GAAP,CAZ4B,CAa5B;AACD","sourcesContent":["const crypto = require('crypto')\n// const assert = require('assert')\n\nconst param = {\n  alg: 'des-ede3-cbc',\n  autoPad: true,\n  key: 'w14OE9H8Q7qV0hisOGl0ZpNX',\n  iv: 'CqMfe4eo'\n}\n\nconsole.log(param, 'cryptocryptocryptocrypto');\n\n// 加密\nexport function encrypt(type, text) {\n  if (type === 'message') {\n    param.key = '1IvFcjTxtXyD8Ki1nPbm1Ipf'\n  }\n  console.log('执行加密', param.key, param.key.length)\n  let key = Buffer.from(param.key)\n  let iv = Buffer.from(param.iv ? param.iv : 0)\n  let plaintext = text\n  let alg = param.alg\n  let autoPad = param.autoPad\n  let cipher = crypto.createCipheriv(alg, key, iv)\n  cipher.setAutoPadding(autoPad)\n  let ciph = cipher.update(plaintext, 'utf8', 'base64')\n  ciph += cipher.final('base64')\n  console.log('加密:' + ciph)\n  return ciph\n}\n\n// 解密\nexport function decrypt(text) {\n  let key = Buffer.from(param.key)\n  let iv = Buffer.from(param.iv ? param.iv : 0)\n  let ciph = text\n  let alg = param.alg\n  let autoPad = param.autoPad\n\n  let decipher = crypto.createDecipheriv(alg, key, iv)\n  decipher.setAutoPadding(autoPad)\n  let txt = decipher.update(ciph, 'base64', 'utf8')\n  txt += decipher.final('utf8')\n  // console.log('解密:' + txt)\n  return txt\n  // assert.strictEqual(txt, '123', 'fail')\n}\n\n"]}]}