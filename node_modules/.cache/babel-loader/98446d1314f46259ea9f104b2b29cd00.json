{"remainingRequest":"D:\\pc\\iqiu\\node_modules\\thread-loader\\dist\\cjs.js!D:\\pc\\iqiu\\node_modules\\babel-loader\\lib\\index.js!D:\\pc\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\pc\\iqiu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\pc\\iqiu\\src\\components\\video\\videoPlayer.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\pc\\iqiu\\src\\components\\video\\videoPlayer.vue","mtime":1594000643097},{"path":"D:\\pc\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593501341354},{"path":"D:\\pc\\iqiu\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1593501343337},{"path":"D:\\pc\\iqiu\\node_modules\\babel-loader\\lib\\index.js","mtime":1593501344079},{"path":"D:\\pc\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593501341354},{"path":"D:\\pc\\iqiu\\node_modules\\vue-loader\\lib\\index.js","mtime":1593501453075}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}