{"remainingRequest":"D:\\pc端clone\\iqiu\\node_modules\\thread-loader\\dist\\cjs.js!D:\\pc端clone\\iqiu\\node_modules\\babel-loader\\lib\\index.js!D:\\pc端clone\\iqiu\\node_modules\\@babel\\runtime-corejs2\\node_modules\\core-js\\library\\modules\\es6.promise.js","dependencies":[{"path":"D:\\pc端clone\\iqiu\\node_modules\\@babel\\runtime-corejs2\\node_modules\\core-js\\library\\modules\\es6.promise.js","mtime":1593501278437},{"path":"D:\\pc端clone\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1593501341354},{"path":"D:\\pc端clone\\iqiu\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1593501343337},{"path":"D:\\pc端clone\\iqiu\\node_modules\\babel-loader\\lib\\index.js","mtime":1593501344079}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}