{"remainingRequest":"D:\\pc端clone\\iqiu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\pc端clone\\iqiu\\src\\views\\home\\homeLive.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\pc端clone\\iqiu\\src\\views\\home\\homeLive.vue","mtime":1597652456932},{"path":"D:\\pc端clone\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\pc端clone\\iqiu\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\pc端clone\\iqiu\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\pc端clone\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\pc端clone\\iqiu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}