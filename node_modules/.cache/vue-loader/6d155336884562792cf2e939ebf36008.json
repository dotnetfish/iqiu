{"remainingRequest":"D:\\pc端clone\\iqiu\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\pc端clone\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\pc端clone\\iqiu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\pc端clone\\iqiu\\src\\views\\home\\homeLive.vue?vue&type=template&id=6348671e&scoped=true&","dependencies":[{"path":"D:\\pc端clone\\iqiu\\src\\views\\home\\homeLive.vue","mtime":1594799810578},{"path":"D:\\pc端clone\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\pc端clone\\iqiu\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\pc端clone\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\pc端clone\\iqiu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidmlkZW9SZWNvbSIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImltZ3JpZ2h0IiwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBfdm0uZG93bmxvYWRyaWdodCgpCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9KSwKICAgICAgICBfYygiZGl2IiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWdsZWZ0IiwKICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICBpZiAoJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBfdm0uZG93bmxvYWRsZWZ0KCkKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiUmVjb21Db250ZW50IiB9LCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJ2aWRlb1JlY29tTWFpbiIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJ2aWRlb1BsYXllciIsIHsKICAgICAgICAgICAgICAgIHJlZjogImRQbGF5ZXIiLAogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ2aWRlb1BsYXllciIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICByb29tSWQ6IF92bS5yZWNvbW1lbmRWaWRlby5pZCwKICAgICAgICAgICAgICAgICAgbm90TGl2aW5nU3VnZ2VzdDogX3ZtLnJlY29tbWVuZFZpZGVvMgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW50b0xpdmVSb21tIiwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmludG9MaXZlUm9tbShfdm0ucmVjb21tZW5kVmlkZW8uaWQpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgW192bS5fdigi6L+b5YWl55u05pKt6Ze0IildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAidmlkZW9SZWNvbUxpc3QiIH0sCiAgICAgICAgICAgIF92bS5fbChfdm0ucmVjb21tZW5kVmlkZW82LCBmdW5jdGlvbihpdGVtKSB7CiAgICAgICAgICAgICAgcmV0dXJuIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGtleTogaXRlbS5pZCwKICAgICAgICAgICAgICAgICAgY2xhc3M6IFsKICAgICAgICAgICAgICAgICAgICBpdGVtLmlkID09PSBfdm0ucmVjb21tZW5kVmlkZW8uaWQKICAgICAgICAgICAgICAgICAgICAgID8gInZpZGVvUmVjb21MaXN0LWFjdGl2ZSIKICAgICAgICAgICAgICAgICAgICAgIDogIiIsCiAgICAgICAgICAgICAgICAgICAgInZpZGVvUmVjb21MaXN0LWl0ZW0iCiAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIxNzRweCIsIGhlaWdodDogIjkycHgiIH0sCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBpdGVtLmltYWdlVXJsIH0sCiAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5jaGFuZ2VSb2NtKGl0ZW0pCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgfSksCiAgICAgICAgICAgIDAKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJsaXZlUmVjb21lbmQgbmV3cyIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICIxNXB4IiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltZy1uZXdzIiB9LCBbCiAgICAgICAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogIm5ld3Mtd3JhcCIgfSwgWwogICAgICAgICAgICAgIF92bS5fbSgwKSwKICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImFsbGltZyIgfSwgWwogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaHVmZmxpbmciIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInNlY3Rpb24iLAogICAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJuZXdzLWNvbnRlbnQiIH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJlbC1jYXJvdXNlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaGVpZ2h0OiAiMzUwcHgiIH0gfSwKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5wcm90b2NvbExpc3QsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jKCJlbC1jYXJvdXNlbC1pdGVtIiwgeyBrZXk6IGluZGV4IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiBpdGVtLnVybCwgdGFyZ2V0OiAiX2JsYW5rIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uaG9tZUNsaWNrRXZlbnQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImFkX2NsaWNrIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAi5paw6Ze75YWs5ZGKIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnVybAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAiNDIwcHgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6ICIzNTBweCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IGl0ZW0uaW1nIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfdm0uX20oMSkKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInNlY3Rpb24iLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJyaWdodG5ld3MiIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl9tKDIpLAogICAgICAgICAgICAgICAgX3ZtLl9sKF92bS5wcm90b2NvbExpc3QsIGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfYygiZGl2IiwgeyBrZXk6IGluZGV4LCBzdGF0aWNDbGFzczogIm5ld3MtaXRlbSIgfSwgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm5ld3MtaXRlbS10aXRsZSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IGl0ZW0udXJsLCB0YXJnZXQ6ICJfYmxhbmsiIH0KICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KF92bS5fcyhpdGVtLnRpdGxlKSldCiAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJzaGFyZWFsbCIgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgImVsLXBvcG92ZXIiLAogICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudDogImJvdHRvbS1zdGFydCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICLogIHpk4HliIbkuqvkuIDkuKrlkZd+IiwKICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIjQxMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlcjogImhvdmVyIgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRleHQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIuiAgemTgeWIhuS6q+S4gOS4quWRl34iKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzaGFyZWFyZWEiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInNoYXJlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNoYXJlKCJxcSIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL3NoYXJlL3FxLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2hhcmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2hhcmUoInF6b25lIikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvc2hhcmUva29uZ2ppYW4ucG5nIiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzaGFyZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zaGFyZSgid2VpYm8iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9zaGFyZS94aW5sYW5nLnBuZyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAic2hhcmUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdm0uc2hhcmUoIndlaXhpbiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgW192bS5fdigi5YiG5Lqrd2VpeGluIildCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgImVsLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgeyBhdHRyczogeyBzbG90OiAicmVmZXJlbmNlIiB9LCBzbG90OiAicmVmZXJlbmNlIiB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIFtfdm0uX3YoIuWIhuS6qyIpXQogICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJzZWN0aW9uIiwgeyBzdGF0aWNDbGFzczogImhvdC13cmFwIiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGl2ZVJlY29tZW5kLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgIHdpZHRoOiAiMjVweCIsCiAgICAgICAgICAgICAgICAgIGhlaWdodDogIjIycHgiLAogICAgICAgICAgICAgICAgICBtYXJnaW46ICIxOHB4IDEycHggMThweCAwcHgiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9ob21lL2hvbWVJY29uL2hvdFJlY29tQDJ4LnBuZyIpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibGl2ZVJlY29tZW5kLXRpdGxlLXRleHQiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigi54Ot6ZeoICIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYnV0dG9uIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJsaXZlUmVjb21lbmQtdGl0bGUtY2hlbmdlIiwKICAgICAgICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmNoYW5nZUhvdFZpZGVvKCkKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCLmjaLkuIDmjaIgIildCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIwIC0xMnB4Iiwgd2lkdGg6ICIxMDAlIiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImxpdmVsaXN0aXRlbSIsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBsaXZlTGlzdDogX3ZtLnJlY29tbWVuZFZpZGVvOCwKICAgICAgICAgICAgICAgICAgICBpdGVtU3R5bGU6IHsgd2lkdGg6ICJjYWxjKDI0LjQlIC0gMThweCkiIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgb246IHsgaG9tZUxpc3RFdmVudFRhbmNrOiBfdm0uaG9tZUxpc3RIb3RUYW5jayB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgIHZhbHVlOiBfdm0ucmVjb21tZW5kRm9vdGJhbGwubGVuZ3RoID4gMCwKICAgICAgICAgICAgICBleHByZXNzaW9uOiAicmVjb21tZW5kRm9vdGJhbGwubGVuZ3RoPjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICBzdGF0aWNDbGFzczogImxpdmVSZWNvbWVuZCIKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fbSgzKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIwIC0xMnB4Iiwgd2lkdGg6ICIxMjI0cHgiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJsaXZlbGlzdGl0ZW0iLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBsaXZlTGlzdDogX3ZtLnJlY29tbWVuZEZvb3RiYWxsLAogICAgICAgICAgICAgICAgICBpdGVtU3R5bGU6IHsgd2lkdGg6ICJjYWxjKDI1JSAtIDI0cHgpIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb246IHsgaG9tZUxpc3RFdmVudFRhbmNrOiBfdm0uaG9tZUxpc3RGb290YmFsbFRhbmNrIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBuYW1lOiAic2hvdyIsCiAgICAgICAgICAgICAgcmF3TmFtZTogInYtc2hvdyIsCiAgICAgICAgICAgICAgdmFsdWU6IF92bS5yZWNvbW1lbmRCYXNrZXRiYWxsLmxlbmd0aCA+IDAsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInJlY29tbWVuZEJhc2tldGJhbGwubGVuZ3RoPjAiCiAgICAgICAgICAgIH0KICAgICAgICAgIF0sCiAgICAgICAgICBzdGF0aWNDbGFzczogImxpdmVSZWNvbWVuZCIKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF92bS5fbSg0KSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyBtYXJnaW46ICIwIC0xMnB4Iiwgd2lkdGg6ICIxMjI0cHgiIH0gfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJsaXZlbGlzdGl0ZW0iLCB7CiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBsaXZlTGlzdDogX3ZtLnJlY29tbWVuZEJhc2tldGJhbGwsCiAgICAgICAgICAgICAgICAgIGl0ZW1TdHlsZTogeyB3aWR0aDogImNhbGMoMjUlIC0gMjRweCkiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbjogeyBob21lTGlzdEV2ZW50VGFuY2s6IF92bS5ob21lTGlzdEJhc2tldEJhbGxUYW5jayB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgbmFtZTogInNob3ciLAogICAgICAgICAgICAgIHJhd05hbWU6ICJ2LXNob3ciLAogICAgICAgICAgICAgIHZhbHVlOiBfdm0ucmVjb21tZW5kQWxsLmxlbmd0aCA+IDAsCiAgICAgICAgICAgICAgZXhwcmVzc2lvbjogInJlY29tbWVuZEFsbC5sZW5ndGg+MCIKICAgICAgICAgICAgfQogICAgICAgICAgXSwKICAgICAgICAgIHN0YXRpY0NsYXNzOiAibGl2ZVJlY29tZW5kIgogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX3ZtLl9tKDUpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7IG1hcmdpbjogIjAgLTEycHgiLCB3aWR0aDogIjEyMjRweCIgfSB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImxpdmVsaXN0aXRlbSIsIHsKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIGxpdmVMaXN0OiBfdm0ucmVjb21tZW5kQWxsLAogICAgICAgICAgICAgICAgICBpdGVtU3R5bGU6IHsgd2lkdGg6ICJjYWxjKDI1JSAtIDI0cHgpIiB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgb246IHsgaG9tZUxpc3RFdmVudFRhbmNrOiBfdm0uaG9tZUxpc3RCYXNrZXRCYWxsVGFuY2sgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKCJyaWdodC1mbG9hdC1sYXllciIsIHsgYXR0cnM6IHsgc3RlcDogMjAwIH0gfSksCiAgICAgIF92bS52aWRlb3Nob3cKICAgICAgICA/IF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyByZWY6ICJtb3ZlZGl2Iiwgc3RhdGljQ2xhc3M6ICJ2aWRlby1jb250ZW50IiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidmlkZW9tb3ZlIiwKICAgICAgICAgICAgICAgIG9uOiB7IG1vdXNlZG93bjogX3ZtLm1vdmUgfQogICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgIF9jKCJ2aWRlb1BsYXllciIsIHsKICAgICAgICAgICAgICAgIHJlZjogInBsYXllciIsCiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogInZpZGVvLXBsYXllciIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICByb29tSWQ6IF92bS5yZWNvbW1lbmRWaWRlby5pZCwKICAgICAgICAgICAgICAgICAgbm90TGl2aW5nU3VnZ2VzdDogX3ZtLnJlY29tbWVuZFZpZGVvMgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICA6IF92bS5fZSgpCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaXZlUmVjb21lbmQtdGl0bGUiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgd2lkdGg6ICIyNXB4IiwKICAgICAgICAgIGhlaWdodDogIjIycHgiLAogICAgICAgICAgbWFyZ2luOiAiMThweCAxMnB4IDE4cHggMHB4IgogICAgICAgIH0sCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9ob21lL2hvbWVJY29uL25ld3MucG5nIikgfQogICAgICB9KSwKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibGl2ZVJlY29tZW5kLXRpdGxlLXRleHQiIH0sIFtfdm0uX3YoIuWumOaWueWFrOWRiiAiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImltZzEiIH0sIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgc3RhdGljU3R5bGU6IHsgd2lkdGg6ICIyMTBweCIsIGhlaWdodDogIjE3MHB4IiB9LAogICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9nb25nZ2FvL3NwZWNpYWwuanBlZyIpIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWcyIiB9LCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IHdpZHRoOiAiMjEwcHgiLCBoZWlnaHQ6ICIxNzBweCIgfSwKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvZ29uZ2dhby9zcGVjaWFsLmpwZWciKSB9CiAgICAgICAgfSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGl2ZVJlY29tZW5kLXRpdGxlIiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgIHdpZHRoOiAiMjVweCIsCiAgICAgICAgICBoZWlnaHQ6ICIyMnB4IiwKICAgICAgICAgIG1hcmdpbjogIjE4cHggMTJweCAxOHB4IDBweCIKICAgICAgICB9LAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaG9tZS9ob21lSWNvbi9uZXdzLnBuZyIpIH0KICAgICAgfSksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImxpdmVSZWNvbWVuZC10aXRsZS10ZXh0IiB9LCBbX3ZtLl92KCLmlrDpl7sgIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaXZlUmVjb21lbmQtdGl0bGUiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgd2lkdGg6ICIyNXB4IiwKICAgICAgICAgIGhlaWdodDogIjIycHgiLAogICAgICAgICAgbWFyZ2luOiAiMThweCAxMnB4IDE4cHggMHB4IgogICAgICAgIH0sCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9ob21lL2hvbWVJY29uL2Zvb3RiYWxsUmVjb21AMngucG5nIikgfQogICAgICB9KSwKICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAibGl2ZVJlY29tZW5kLXRpdGxlLXRleHQiIH0sIFtfdm0uX3YoIui2s+eQgyAiKV0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxpdmVSZWNvbWVuZC10aXRsZSIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICB3aWR0aDogIjI1cHgiLAogICAgICAgICAgaGVpZ2h0OiAiMjJweCIsCiAgICAgICAgICBtYXJnaW46ICIxOHB4IDEycHggMThweCAwcHgiCiAgICAgICAgfSwKICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2hvbWUvaG9tZUljb24vYmFza2V0QmFsbFJlY29tQDJ4LnBuZyIpIH0KICAgICAgfSksCiAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImxpdmVSZWNvbWVuZC10aXRsZS10ZXh0IiB9LCBbX3ZtLl92KCLnr67nkIMgIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaXZlUmVjb21lbmQtdGl0bGUiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgd2lkdGg6ICIyNXB4IiwKICAgICAgICAgIGhlaWdodDogIjIycHgiLAogICAgICAgICAgbWFyZ2luOiAiMThweCAxMnB4IDE4cHggMHB4IgogICAgICAgIH0sCiAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9ob21lL2hvbWVJY29uL2FsbC5wbmciKSB9CiAgICAgIH0pLAogICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJsaXZlUmVjb21lbmQtdGl0bGUtdGV4dCIgfSwgW192bS5fdigi57u85ZCIICIpXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}