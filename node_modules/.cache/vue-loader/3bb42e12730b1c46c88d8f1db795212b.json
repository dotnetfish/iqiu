{"remainingRequest":"D:\\pc端clone\\iqiu\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\pc端clone\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\pc端clone\\iqiu\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\pc端clone\\iqiu\\src\\views\\home\\homeLive.vue?vue&type=template&id=6348671e&scoped=true&","dependencies":[{"path":"D:\\pc端clone\\iqiu\\src\\views\\home\\homeLive.vue","mtime":1595301951043},{"path":"D:\\pc端clone\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\pc端clone\\iqiu\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\pc端clone\\iqiu\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\pc端clone\\iqiu\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}